package aria

var SB1 = [256]byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}
var SB2 = [256]byte{
	0xe2, 0x4e, 0x54, 0xfc, 0x94, 0xc2, 0x4a, 0xcc, 0x62, 0x0d, 0x6a, 0x46, 0x3c, 0x4d, 0x8b, 0xd1,
	0x5e, 0xfa, 0x64, 0xcb, 0xb4, 0x97, 0xbe, 0x2b, 0xbc, 0x77, 0x2e, 0x03, 0xd3, 0x19, 0x59, 0xc1,
	0x1d, 0x06, 0x41, 0x6b, 0x55, 0xf0, 0x99, 0x69, 0xea, 0x9c, 0x18, 0xae, 0x63, 0xdf, 0xe7, 0xbb,
	0x00, 0x73, 0x66, 0xfb, 0x96, 0x4c, 0x85, 0xe4, 0x3a, 0x09, 0x45, 0xaa, 0x0f, 0xee, 0x10, 0xeb,
	0x2d, 0x7f, 0xf4, 0x29, 0xac, 0xcf, 0xad, 0x91, 0x8d, 0x78, 0xc8, 0x95, 0xf9, 0x2f, 0xce, 0xcd,
	0x08, 0x7a, 0x88, 0x38, 0x5c, 0x83, 0x2a, 0x28, 0x47, 0xdb, 0xb8, 0xc7, 0x93, 0xa4, 0x12, 0x53,
	0xff, 0x87, 0x0e, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8e, 0x37, 0x74, 0x32, 0xca, 0xe9, 0xb1,
	0xb7, 0xab, 0x0c, 0xd7, 0xc4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xd9, 0xb6, 0xb9, 0x11, 0x40,
	0xec, 0x20, 0x8c, 0xbd, 0xa0, 0xc9, 0x84, 0x04, 0x49, 0x23, 0xf1, 0x4f, 0x50, 0x1f, 0x13, 0xdc,
	0xd8, 0xc0, 0x9e, 0x57, 0xe3, 0xc3, 0x7b, 0x65, 0x3b, 0x02, 0x8f, 0x3e, 0xe8, 0x25, 0x92, 0xe5,
	0x15, 0xdd, 0xfd, 0x17, 0xa9, 0xbf, 0xd4, 0x9a, 0x7e, 0xc5, 0x39, 0x67, 0xfe, 0x76, 0x9d, 0x43,
	0xa7, 0xe1, 0xd0, 0xf5, 0x68, 0xf2, 0x1b, 0x34, 0x70, 0x05, 0xa3, 0x8a, 0xd5, 0x79, 0x86, 0xa8,
	0x30, 0xc6, 0x51, 0x4b, 0x1e, 0xa6, 0x27, 0xf6, 0x35, 0xd2, 0x6e, 0x24, 0x16, 0x82, 0x5f, 0xda,
	0xe6, 0x75, 0xa2, 0xef, 0x2c, 0xb2, 0x1c, 0x9f, 0x5d, 0x6f, 0x80, 0x0a, 0x72, 0x44, 0x9b, 0x6c,
	0x90, 0x0b, 0x5b, 0x33, 0x7d, 0x5a, 0x52, 0xf3, 0x61, 0xa1, 0xf7, 0xb0, 0xd6, 0x3f, 0x7c, 0x6d,
	0xed, 0x14, 0xe0, 0xa5, 0x3d, 0x22, 0xb3, 0xf8, 0x89, 0xde, 0x71, 0x1a, 0xaf, 0xba, 0xb5, 0x81,
}
var SB3 = [256]byte{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
}
var SB4 = [256]byte{
	0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
	0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
	0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
	0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
	0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
	0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
	0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
	0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
	0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
	0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
	0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
	0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
	0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
	0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
	0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
	0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60,
}

var c1 = [4]uint32{
	0x517cc1b7, 0x27220a94, 0xfe13abe8, 0xfa9a6ee0,
}
var c2 = [4]uint32{
	0x6db14acc, 0x9e21c820, 0xff28b1d5, 0xef5de2b0,
}
var c3 = [4]uint32{
	0xdb92371d, 0x2126e970, 0x03249775, 0x04e8c90e,
}

type Aria struct {
	numrouds  int
	RoundKeys []uint32
}

func NewAria(key []uint32) *Aria {
	var r int
	switch len(key) {
	case 4:
		r = 12
	case 6:
		r = 14
	case 8:
		r = 16
	default:
		panic("Invalid key length for ARIA cipher")
	}

	roundKeys := keySchedule(key)

	aria := Aria{
		numrouds:  r,
		RoundKeys: roundKeys,
	}

	return &aria
}

func A(x [16]byte) [16]uint8 {
	var y [16]byte
	y[0] = x[3] ^ x[4] ^ x[6] ^ x[8] ^ x[9] ^ x[13] ^ x[14]
	y[1] = x[2] ^ x[5] ^ x[7] ^ x[8] ^ x[9] ^ x[12] ^ x[15]
	y[2] = x[1] ^ x[4] ^ x[6] ^ x[10] ^ x[11] ^ x[12] ^ x[15]
	y[3] = x[0] ^ x[5] ^ x[7] ^ x[10] ^ x[11] ^ x[13] ^ x[14]
	y[4] = x[0] ^ x[2] ^ x[5] ^ x[8] ^ x[11] ^ x[14] ^ x[15]
	y[5] = x[1] ^ x[3] ^ x[4] ^ x[9] ^ x[10] ^ x[14] ^ x[15]
	y[6] = x[0] ^ x[2] ^ x[7] ^ x[9] ^ x[10] ^ x[12] ^ x[13]
	y[7] = x[1] ^ x[3] ^ x[6] ^ x[8] ^ x[11] ^ x[12] ^ x[13]
	y[8] = x[0] ^ x[1] ^ x[4] ^ x[7] ^ x[10] ^ x[13] ^ x[15]
	y[9] = x[0] ^ x[1] ^ x[5] ^ x[6] ^ x[11] ^ x[12] ^ x[14]
	y[10] = x[2] ^ x[3] ^ x[5] ^ x[6] ^ x[8] ^ x[13] ^ x[15]
	y[11] = x[2] ^ x[3] ^ x[4] ^ x[7] ^ x[9] ^ x[12] ^ x[14]
	y[12] = x[1] ^ x[2] ^ x[6] ^ x[7] ^ x[9] ^ x[11] ^ x[12]
	y[13] = x[0] ^ x[3] ^ x[6] ^ x[7] ^ x[8] ^ x[10] ^ x[13]
	y[14] = x[0] ^ x[3] ^ x[4] ^ x[5] ^ x[9] ^ x[11] ^ x[14]
	y[15] = x[1] ^ x[2] ^ x[4] ^ x[5] ^ x[8] ^ x[10] ^ x[15]
	return y
}

func SL1(x [16]byte) [16]byte {
	var y [16]byte
	y[0] = SB1[x[0]]
	y[4] = SB1[x[4]]
	y[8] = SB1[x[8]]
	y[12] = SB1[x[12]]
	y[1] = SB2[x[1]]
	y[5] = SB2[x[5]]
	y[9] = SB2[x[9]]
	y[13] = SB2[x[13]]
	y[2] = SB3[x[2]]
	y[6] = SB3[x[6]]
	y[10] = SB3[x[10]]
	y[14] = SB3[x[14]]
	y[3] = SB4[x[3]]
	y[7] = SB4[x[7]]
	y[11] = SB4[x[11]]
	y[15] = SB4[x[15]]
	return y
}

func SL2(x [16]byte) [16]byte {
	var y [16]byte
	y[0] = SB3[x[0]]
	y[4] = SB3[x[4]]
	y[8] = SB3[x[8]]
	y[12] = SB3[x[12]]
	y[1] = SB4[x[1]]
	y[5] = SB4[x[5]]
	y[9] = SB4[x[9]]
	y[13] = SB4[x[13]]
	y[2] = SB1[x[2]]
	y[6] = SB1[x[6]]
	y[10] = SB1[x[10]]
	y[14] = SB1[x[14]]
	y[3] = SB2[x[3]]
	y[7] = SB2[x[7]]
	y[11] = SB2[x[11]]
	y[15] = SB2[x[15]]
	return y
}

func keySchedule(key []uint32) []uint32 {
	var masterKey []uint32
	masterKey = append(masterKey, key...)
	var ck1, ck2, ck3 [4]uint32

	switch len(key) {
	case 4:
		masterKey = append(masterKey, make([]uint32, 4)...)
		ck1 = c1
		ck2 = c2
		ck3 = c3
	case 6:
		masterKey = append(masterKey, make([]uint32, 2)...)
		ck1 = c2
		ck2 = c3
		ck3 = c1
	case 8:
		ck1 = c3
		ck2 = c1
		ck3 = c2
		break
	default:
		panic("Invalid key length for ARIA cipher")
	}

	slice := masterKey[4:8]
	KR := [4]uint32{slice[0], slice[1], slice[2], slice[3]}

	var W0 [4]uint32
	W0 = [4]uint32(masterKey)
	W1 := xorUint32Slices(FO(W0, ck1), KR)
	W2 := xorUint32Slices(FE(W1, ck2), W0)
	W3 := xorUint32Slices(FO(W2, ck3), W1)

	ek1 := xorUint32Slices(W0, rrot128(W1, 19))
	ek2 := xorUint32Slices(W1, rrot128(W2, 19))
	ek3 := xorUint32Slices(W2, rrot128(W3, 19))
	ek4 := xorUint32Slices(rrot128(W0, 19), W3)
	ek5 := xorUint32Slices(W0, rrot128(W1, 31))
	ek6 := xorUint32Slices(W1, rrot128(W2, 31))
	ek7 := xorUint32Slices(W2, rrot128(W3, 31))
	ek8 := xorUint32Slices(rrot128(W0, 31), W3)
	ek9 := xorUint32Slices(W0, lrot128(W1, 61))
	ek10 := xorUint32Slices(W1, lrot128(W2, 61))
	ek11 := xorUint32Slices(W2, lrot128(W3, 61))
	ek12 := xorUint32Slices(lrot128(W0, 61), W3)
	ek13 := xorUint32Slices(W0, lrot128(W1, 31))
	ek14 := xorUint32Slices(W1, lrot128(W2, 31))
	ek15 := xorUint32Slices(W2, lrot128(W3, 31))
	ek16 := xorUint32Slices(lrot128(W0, 31), W3)
	ek17 := xorUint32Slices(W0, lrot128(W1, 19))

	allEk := [17][4]uint32{
		ek1, ek2, ek3, ek4, ek5, ek6, ek7, ek8, ek9,
		ek10, ek11, ek12, ek13, ek14, ek15, ek16, ek17,
	}

	roundKeys := make([]uint32, 0, 17*4)
	for _, ek := range allEk {
		roundKeys = append(roundKeys, ek[:]...)
	}

	return roundKeys
}

func FO(d [4]uint32, k [4]uint32) [4]uint32 {
	temp := xorUint32Slices(d, k)
	res := A(SL1(uint32SliceToUint8(temp)))
	result := uint8Array16ToUint32(res)
	return result
}

func FE(d [4]uint32, k [4]uint32) [4]uint32 {
	temp := xorUint32Slices(d, k)
	res := A(SL2(uint32SliceToUint8(temp)))
	result := uint8Array16ToUint32(res)
	return result
}

func uint32SliceToUint8(input [4]uint32) [16]byte {
	var output [16]byte
	j := 0
	for _, word := range input {
		output[j] = byte(word >> 24)
		output[j+1] = byte(word >> 16)
		output[j+2] = byte(word >> 8)
		output[j+3] = byte(word)
		j += 4
	}
	return output
}

func xorUint32Slices(a, b [4]uint32) [4]uint32 {
	if len(a) != len(b) {
		panic("slices must be the same length")
	}

	var result [4]uint32
	for i := range a {
		result[i] = a[i] ^ b[i]
	}
	return result
}

func xorBytes(a, b [16]byte) []byte {
	if len(a) != len(b) {
		panic("xorBytes: slices must be of equal length")
	}
	result := make([]byte, len(a))
	for i := 0; i < len(a); i++ {
		result[i] = a[i] ^ b[i]
	}
	return result
}

func uint8Array16ToUint32(input [16]byte) [4]uint32 {
	var output [4]uint32
	for i := 0; i < 4; i++ {
		output[i] = uint32(input[i*4])<<24 |
			uint32(input[i*4+1])<<16 |
			uint32(input[i*4+2])<<8 |
			uint32(input[i*4+3])
	}
	return output
}

func lrot128(x [4]uint32, n uint) (y [4]uint32) {
	n = n % 128
	if n == 0 {
		return x
	}

	q := n / 32
	r := n % 32
	s := 32 - r

	for i := 0; i < 4; i++ {
		a := x[(int(q)+i)%4]
		b := x[(int(q)+i+1)%4]
		y[i] = (a << r) | (b >> s)
	}

	return
}

func rrot128(x [4]uint32, n uint) (y [4]uint32) {
	n = n % 128
	if n == 0 {
		return x
	}

	q := n / 32
	r := n % 32
	s := 32 - r

	for i := 0; i < 4; i++ {
		a := x[(4+int(i)-int(q))%4]
		b := x[(4+int(i)-int(q)-1)%4]
		y[i] = (a >> r) | (b << s)
	}

	return
}
